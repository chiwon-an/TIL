'''
그래프 구조(연결된 모든 것을 확인)
'''


def dfs(current_node):
    
    # 1. 현재 노드에 대한 방문 처리
    visited[current_node] = True
    
    # 2. 현재 노드와 연결된 모든 이웃 노드를 확인
    for neighbor_node in graph[current_node]:
        
        # 3. 만약 이웃이 아직 방문하지 않은 곳이라면
        if not visited[neighbor_node]:
            
            # 그 이웃을 시작으로 다시 DFS를 호출 (재귀)
            dfs(neighbor_node)
            
visited = [False] * N
dfs(0)  # 0번 노드부터 탐색 시작


'''
조합 탐색(N개 중에 몇 개를 뽑는 모든 경우의 수, 순열, 부분집합)
'''

def dfs(depth, ...다른 필요한 파라미터...):
    
    # (선택사항) 가지치기 : 더 이상 탐색이 무의미할 때 중단
    # if 조건_만족_시_더_볼_필요_없음:
    #     return
    
    # 1. 종료 조건 : 모든 선택을 완료했을 때 (깊이가 끝까지 도달했을 때)
    if depth == N:
        # --------완성된 조합에 대한 작업 수행-----------
        # 예 : print(result) 또는 정답 최솟값 갱신
        return
    
    # 2. 현재 깊이(depth)에서 할 수 있는 모든 선택지를 시도
    
    # 선택지 A : 현재 depth의 원소를 포함시킨다.
    #------포함시키는 데 필요한 작업 수행-------
    dfs(depth+1, ...변경된 파라미터...)
    # --- 다음 선택을 위해 방금 한 작업을 원상복구 (중요!) ---
    
    
    # 선택지 B : 현재 depth의 원소를 포함시키지 않는다.
    #------포함시키지 않는데 필요한 작업 수행-------
    dfs(depth+1, ...변경된 파라미터...)
    # --- 다음 선택을 위해 방금 한 작업을 원상복구 (중요!) ---
    
    
# ----실제 코드 실행 부분 ----
# dfs(0,...)    0번 깊이(첫 번째 원소)부터 탐색 시작